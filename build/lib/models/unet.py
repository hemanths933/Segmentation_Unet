# -*- coding: utf-8 -*-
"""Unet.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1xA5nvVUjfXb24DWd8TCbVb_a4rNZbJSl
"""

import tensorflow as tf
import numpy as np
from models.Model import Model


class Unet(Model):
  def __init__(self):
    print("unet init")
    Model.__init__(self)

    
  def network(images):
    input_layer = tf.reshape(images,[-1,572,572,4])
    print(input_layer)
    conv1 = tf.layers.conv2d(inputs=input_layer,filters=64,kernel_size=[3, 3],padding="valid",activation=tf.nn.relu)
    print(conv1)
    conv2 = tf.layers.conv2d(inputs=conv1,filters=64,kernel_size=[3, 3],padding="valid",activation=tf.nn.relu)#,name = 'conv_merge_4'
    print(conv2)
    pool1 = tf.layers.max_pooling2d(inputs=conv2, pool_size=[2, 2], strides=2)
    print(pool1)


    conv3 = tf.layers.conv2d(inputs=pool1,filters=128,kernel_size=[3, 3],padding="valid",activation=tf.nn.relu)
    print(conv3)
    conv4 = tf.layers.conv2d(inputs=conv3,filters=128,kernel_size=[3, 3],padding="valid",activation=tf.nn.relu)#,name = 'conv_merge_3'
    print(conv4)
    pool2 = tf.layers.max_pooling2d(inputs=conv4, pool_size=[2, 2], strides=2)
    print(pool2)


    conv5 = tf.layers.conv2d(inputs=pool2,filters=256,kernel_size=[3, 3],padding="valid",activation=tf.nn.relu)
    print(conv5)
    conv6 = tf.layers.conv2d(inputs=conv5,filters=256,kernel_size=[3, 3],padding="valid",activation=tf.nn.relu)#,name = 'conv_merge_2'
    print(conv6)
    pool3 = tf.layers.max_pooling2d(inputs=conv6, pool_size=[2, 2], strides=2)
    print(pool3)


    conv7 = tf.layers.conv2d(inputs=pool3,filters=512,kernel_size=[3, 3],padding="valid",activation=tf.nn.relu)
    print(conv7)
    conv8 = tf.layers.conv2d(inputs=conv7,filters=512,kernel_size=[3, 3],padding="valid",activation=tf.nn.relu)#,name = 'conv_merge_1'
    print(conv8)
    pool4 = tf.layers.max_pooling2d(inputs=conv8, pool_size=[2, 2], strides=2,name = 'p4')
    print(pool4)

    conv9 = tf.layers.conv2d(inputs=pool4,filters=1024,kernel_size=[3, 3],padding="valid",activation=tf.nn.relu)
    print(conv9)
    conv10 = tf.layers.conv2d(inputs=conv9,filters=1024,kernel_size=[3, 3],padding="valid",activation=tf.nn.relu)
    print(conv10)
    deconv1 = tf.layers.conv2d_transpose(inputs=conv10,filters=512,kernel_size=[2, 2],strides = (2,2),padding='valid',activation=tf.nn.relu)
    print(deconv1)

    concat1 = concat(conv8,deconv1)
    print("concat1:",concat1)
    conv11 = tf.layers.conv2d(inputs=concat1,filters=512,kernel_size=[3, 3],padding="valid",activation=tf.nn.relu)
    print(conv11)
    conv12 = tf.layers.conv2d(inputs=conv11,filters=512,kernel_size=[3, 3],padding="valid",activation=tf.nn.relu)
    print(conv12)
    deconv2 = tf.layers.conv2d_transpose(inputs=conv12,filters=256,kernel_size=[2, 2],strides = (2,2),padding='valid',activation=tf.nn.relu)
    print(deconv2)

    concat2 = concat(conv6,deconv2)
    print("concat2:",concat2)
    conv13 = tf.layers.conv2d(inputs=concat2,filters=256,kernel_size=[3, 3],padding="valid",activation=tf.nn.relu)
    print(conv13)
    conv14 = tf.layers.conv2d(inputs=conv13,filters=256,kernel_size=[3, 3],padding="valid",activation=tf.nn.relu)
    print(conv14)
    deconv3 = tf.layers.conv2d_transpose(inputs=conv14,filters=128,kernel_size=[2, 2],strides = (2,2),padding='valid',activation=tf.nn.relu)
    print(deconv3)

    concat3 = concat(conv4,deconv3)
    print("concat3:",concat3)
    conv15 = tf.layers.conv2d(inputs=concat3,filters=128,kernel_size=[3, 3],padding="valid",activation=tf.nn.relu)
    print(conv15)
    conv16 = tf.layers.conv2d(inputs=conv15,filters=128,kernel_size=[3, 3],padding="valid",activation=tf.nn.relu)
    print(conv16)
    deconv4 = tf.layers.conv2d_transpose(inputs=conv16,filters=64,kernel_size=[2, 2],strides = (2,2),padding='valid',activation=tf.nn.relu)
    print(deconv4)

    concat4 = concat(conv2,deconv4)
    print("concat4:",concat4)
    conv17 = tf.layers.conv2d(inputs=concat4,filters=64,kernel_size=[3, 3],padding="valid",activation=tf.nn.relu)
    print(conv17)
    conv18 = tf.layers.conv2d(inputs=conv17,filters=64,kernel_size=[3, 3],padding="valid",activation=tf.nn.relu)
    print(conv18)


    output = tf.layers.conv2d(inputs=conv17,filters=2,kernel_size=[1, 1],padding="valid",activation=tf.nn.sigmoid)
    return output